package one.dichmann.lectioapp;

import android.content.Intent;
import android.support.v7.app.ActionBar;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.view.Gravity;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.TextView;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.Objects;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import downloadLectio.AsyncResponse;
import downloadLectio.GetGyms;
import downloadLectio.GetSchedule;
import schedule.Schedule;
import schedule.Weekday;

public class ScheduleActivity extends AppCompatActivity implements AsyncResponse {
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_schedule);

        String gymID;
        String nameID;

        Intent intent = getIntent();
        gymID = intent.getStringExtra(LoginActivity.finalGymID);
        nameID = intent.getStringExtra(LoginActivity.finalNameID);
        System.out.println(gymID+"-"+nameID);

        getIntent();

        Schedule asyncTaskSchedule = new Schedule();
        asyncTaskSchedule.delegate = this;
        asyncTaskSchedule.gymID = gymID;
        asyncTaskSchedule.nameID = nameID;
        asyncTaskSchedule.context = this;
        asyncTaskSchedule.mainLinearLayout = (LinearLayout) findViewById(R.id.activity_schedule);
        asyncTaskSchedule.dayAndDate = findViewById(R.id.schedule_DayAndDate);
        asyncTaskSchedule.execute();
    }

    @Override
    public void processFinish(String output) {
    }

    @Override
    public void processViews(Object objects) {

        Date date = new Date(); //initialices date
        int n = 0;
        String todayDate;
        String todayDay;
        String todayWeek;
        String weekDay = null;
        SimpleDateFormat s = new SimpleDateFormat("yyyy-dd-MM HH:mm:ss");//today down to every detail
        String[] dateint = s.format(date).split(""); //new Date should have todays date after parsed since Date is generated by currentmillis

        ArrayList<ArrayList<TextView[]>> object = (ArrayList<ArrayList<TextView[]>>) objects;
        TextView[] textViewModule = new TextView[2];
        LinearLayout.LayoutParams moduleLLParams = new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT, LinearLayout.LayoutParams.WRAP_CONTENT);
        moduleLLParams.setMargins(0, 20, 0, 0);

        Calendar c = Calendar.getInstance();//calender is created and called upon
        c.setTime(date);                    //the calender is set with today date
        int dayOfWeek = c.get(Calendar.DAY_OF_WEEK); //gets a integer between to be compared with the weekday

        todayDay = Weekday.Weekday(); //gets a string with todays physical name
        if (todayDay == "Lørdag") { //checks if it´s saturday
            todayDay = "Mandag"; //sets the day to Monday
            todayWeek = Weekday.todayWeek(1, 0); //adds one week to the week of the year
        } else if (todayDay == "Søndag") { //checks if it´s sunday
            todayDay = "Mandag"; //sets the day to Monday
            todayWeek = Weekday.todayWeek(1, 0);//adds one week to the week of the year
        }

        //date were split due to us formatting it from a american standard to a more common danish way (not the Dansih standard)
        if (dateint[6].equals("0")) { //zero´s look bad in the monthday and months number
            dateint[6] = "";
        }
        if (dateint[9].equals("0")) { //zero´s look bad in the monthday and months number
            dateint[9] = "";
        }

        todayDate = dateint[6] + dateint[7] + "/" + dateint[9] + dateint[10] + "-" + dateint[1] + dateint[2] + dateint[3] + dateint[4];

        if (Calendar.MONDAY == dayOfWeek) { weekDay = "Mandag"; n = 1; }
        else if (Calendar.TUESDAY == dayOfWeek) { weekDay = "Tirsdag"; n = 2; }
        else if (Calendar.WEDNESDAY == dayOfWeek) { weekDay = "Onsdag"; n = 3; }
        else if (Calendar.THURSDAY == dayOfWeek) { weekDay = "Torsdag"; n = 4; }
        else if (Calendar.FRIDAY == dayOfWeek) { weekDay = "Fredag"; n = 5; }
        else if (Calendar.SATURDAY == dayOfWeek) { weekDay = "Lørdag"; n = 6; }
        else if (Calendar.SUNDAY == dayOfWeek) { weekDay = "Søndag"; n = 7; }

        LinearLayout.LayoutParams layoutParams = new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT, LinearLayout.LayoutParams.WRAP_CONTENT);

        TextView dayDay = new TextView(this);
        dayDay.setTextSize(25);
        dayDay.setGravity(Gravity.CENTER);
        dayDay.setTextColor(this.getResources().getColor(R.color.schedule_TextColor));
        dayDay.setLayoutParams(layoutParams);
        dayDay.setText(todayDay);

        TextView dayDate = new TextView(this);
        dayDate.setTextSize(25);
        dayDate.setTextColor(this.getResources().getColor(R.color.schedule_TextColor));
        dayDate.setLayoutParams(layoutParams);
        dayDate.setGravity(Gravity.CENTER);
        dayDate.setText(todayDate);

        ((LinearLayout) findViewById(R.id.schedule_DayAndDate)).addView(dayDay);
        ((LinearLayout) findViewById(R.id.schedule_DayAndDate)).addView(dayDate);

        for (int i=0;i<object.get(n).size();i++) {
            LinearLayout moduleLL = new LinearLayout(this);
            moduleLL.setOrientation(LinearLayout.VERTICAL);
            moduleLL.setLayoutParams(moduleLLParams);
            moduleLL.setGravity(Gravity.CENTER);
            moduleLL.setBackgroundColor(getResources().getColor(R.color.schedule_Regular));

            textViewModule = (TextView[]) object.get(n).get(i);

            for (int k = 0; k < textViewModule.length; k++) {
                moduleLL.addView(textViewModule[k]);
            }

            ((LinearLayout) findViewById(R.id.activity_schedule)).addView(moduleLL);
        }
    }
/*
    @Override
    public void processViews(Object[] objects) {
        TextView[] textView = (TextView[]) objects[0];
        TextView[] textViewModule = new TextView[3];
        ((LinearLayout) findViewById(R.id.schedule_DayAndDate)).addView(textView[0]);
        ((LinearLayout) findViewById(R.id.schedule_DayAndDate)).addView(textView[1]);
        LinearLayout.LayoutParams moduleLLParams = new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT, LinearLayout.LayoutParams.WRAP_CONTENT);
        moduleLLParams.setMargins(0, 20, 0, 0);

        for (int i=1;i<objects.length;i++) {
            LinearLayout moduleLL = new LinearLayout(this);
            moduleLL.setOrientation(LinearLayout.VERTICAL);
            moduleLL.setLayoutParams(moduleLLParams);
            moduleLL.setGravity(Gravity.CENTER);
            moduleLL.setBackgroundColor(getResources().getColor(R.color.schedule_Regular));

            textViewModule = (TextView[]) objects[i];

            for (int k=0;k<textView.length+1;k++) {
                moduleLL.addView(textViewModule[k]);
            }

            ((LinearLayout) findViewById(R.id.activity_schedule)).addView(moduleLL);

        }
    }
    */
}
